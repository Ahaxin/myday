0) Product snapshot (what you’ll ship)

App: My Day (iPhone first).

Auth: Sign in with Apple, Google Sign-In, or email/password.

Home: Center Record button; live waveform; tap = Pause/Resume, long-press ~3s = Stop. Under the button: “Type instead” to open text entry.

Save: Auto-filename YYYY-MM-DD_HH-mm-ss_<uuid8>.m4a.

Transcription: Upload to server → ASR → AI cleanup (remove fillers, punctuation) → sync on launch or manual pull.

Library (top-left): Date-sorted entries; tap to view transcript and there is a button to play audio.

Profile (top-right): Total recordings; export by date range to email (audio + cleaned transcript).

Hint: First-run tooltip: “Long-press ~3s to stop.”

1) Architecture & stack

Client (iOS — My Day)

Swift + SwiftUI, AVFoundation/AVAudioEngine, Swift Concurrency.

Waveform via SwiftUI Canvas + Accelerate.

State: Observable + async/await.

Storage: Core Data for metadata; audio in Documents; background uploads via URLSession (background).

Auth: AuthenticationServices (Apple), GoogleSignIn, email via backend.

Sync: REST (JSON) + BGTaskScheduler.

Server (My Day API)

FastAPI (Python) or NestJS (Node).

Transcription: Whisper (faster-whisper) workers.

Cleanup: LLM pass (remove “uh/um”, punctuation, paragraphing).

Storage: S3/R2/GCS for blobs; Postgres for data; Redis queue.

Auth: JWT; verify Apple/Google tokens server-side.

Export: Zip builder + signed link; email via SES/SendGrid.

2) Data model (My Day)

User: id, email, apple_sub?, google_sub?, created_at
Entry: id, user_id, created_at, duration_s, status{uploaded|transcribed|failed}, audio_url, size_bytes, language?, transcript_raw?, transcript_clean?
ExportRequest: id, user_id, from, to, status, result_url?, created_at

Filename: YYYY-MM-DD_HH-mm-ss_<uuid8>.m4a (stable, sortable, unique)

3) UX flow & acceptance criteria

Record

Start/ pause/ resume; long-press 3s = stop with radial progress; smooth waveform (≥30 FPS).

Offline safe; upload queues when back online.

Library

Top-left → grouped by day/month; shows status (“Transcribing…”). Pull-to-refresh sync.

Profile

Totals (count/duration). Export picker → email link to .zip of audio + YYYY-MM-DD_HH-mm-ss.txt.

Accessibility: VoiceOver announcements for state changes; large hit targets.

4) Milestones (rename modules to “MyDay.*”)

Scaffold: SwiftUI app “My Day”; targets, icons, colors/typography tokens. Bundle ID e.g., com.yourdomain.myday.

Audio + Waveform: MyDayAudioService (start/pause/resume/stop), AAC .m4a, live RMS/FFT → WaveformView.

Local Library: Core Data Entry; file manager; list/detail with playback.

Auth: Apple + Google + email; MyDayAuthService → backend token exchange; Keychain storage.

Networking & Background Upload: URLSession background tasks; retry/backoff; offline queueing.

Server MVP: Auth, signed upload URLs, entries create/list, worker pipeline (ASR → cleanup), status polling.

Sync: On-launch & manual; merge statuses/transcripts; conflict rules.

Profile + Export: Stats, date-range export → email signed link.

Polish: Haptics, first-run hint, empty/error states, localization hooks.

Security/QA: Token rotation, rate limits, unit/UI/integration tests.

App Store: Privacy labels, “Delete Account/Data”, TestFlight, review notes.

5) iOS implementation notes (My Day)

Audio session: .playAndRecord, mode .measurement, options .defaultToSpeaker, .allowBluetooth.

Engine: AVAudioEngine + AVAudioFile for control & metering; write to temp then atomic move on stop.

Waveform: Ring buffer of RMS/short-FFT samples; draw with Canvas; throttle to display link.

Gestures: LongPressGesture(minimumDuration: 3); show circular progress around the record button.

Background upload: URLSessionConfiguration.background(withIdentifier: "com.yourdomain.myday.uploads"); persist task IDs.

Hints: @AppStorage("hasShownStopHint").

Accessibility: accessibilityLabel/Hint on record/pause; announce transitions via UIAccessibility.post.

6) Server implementation notes (My Day API)

Endpoints

POST /v1/auth/apple|google|email

POST /v1/entries → returns signed PUT URL + entry_id

GET /v1/entries?since=... (paginated)

GET /v1/entries/{id}

POST /v1/exports (from,to,email), GET /v1/exports/{id}

Worker pipeline

Fetch audio, run Whisper, store transcript_raw.

LLM cleanup with prompt:

“Clean this diary transcript for readability. Remove filler words (uh/um/ah/like), add punctuation and casing, preserve meaning and tone. Don’t invent content.”

Save transcript_clean, mark transcribed.

Security

Verify Apple identityToken (iss/aud/kid); Google via certs.

Short-lived JWT + rotating refresh; signed URLs time-bound; per-user/IP rate limits.

7) Testing strategy (My Day)

Unit: Audio service, filename rules, persistence, API client.

UI: Record/pause/stop/long-press, hint display, offline upload queue.

Integration: Upload → transcribe → sync round-trip.

Load: Batch transcriptions & export zips.

Edge: Phone call interruptions, low disk, mic denied, background kills.

8) “Use Codex fully” — ready-to-paste prompts

Paste these into your AI coding assistant to generate boilerplate quickly (replace yourdomain as needed).

(A) SwiftUI scaffold — My Day

Create a SwiftUI iOS app named “My Day” (bundle id com.yourdomain.myday). Folders: App, Features/{Home,Library,Profile}, Services/{Audio,Storage,API,Auth,Sync}, Models, Utilities, Tests. Provide a HomeView with a centered record button and “Type instead” link. Include Core Data stack and an AppTheme for colors/typography.

(B) Audio + Waveform

Implement MyDayAudioService using AVAudioEngine to start/pause/resume/stop recording to AAC .m4a at 44.1kHz. Expose @Published or async streams for isRecording, isPaused, rmsLevel, and duration. Add RecordButtonView (tap toggles pause/resume; long-press 3s to stop with circular progress). Add WaveformView drawing 48–64 bars from a ring buffer at 60fps via SwiftUI Canvas.

(C) Persistence & filenames

Add Core Data entity Entry { id: UUID, createdAt: Date, localAudioPath: String, duration: Double, status: String, sizeBytes: Int64 }. Implement EntryStore with CRUD and migration. Filenames follow YYYY-MM-DD_HH-mm-ss_<uuid8>.m4a. Include unit tests.

(D) Background upload

Implement UploadService using a background URLSession. enqueueUpload(entry:) returns a task id; persist mapping; handle delegate callbacks to update status and retry with exponential backoff. Rehydrate pending tasks on app launch. Provide mocks/tests.

(E) Auth

Add Sign in with Apple (AuthenticationServices) and Google Sign-In. Implement MyDayAuthService to exchange identity tokens with backend for JWT/refresh; store in Keychain; auto-refresh. Include SwiftUI sign-in views and tests.

(F) Library & Detail

Build LibraryView grouped by date with pull-to-refresh, showing title (date/time), status pill, and duration. EntryDetailView plays audio and shows transcript_clean when available; show “Transcribing…” state otherwise. Add empty/error states.

(G) Sync

Implement SyncService that on app start and manual refresh pulls changed entries and merges by id. Resolve conflicts preferring latest server status/transcript_clean. Tests included.

(H) FastAPI server scaffold

Generate a FastAPI project “myday-api” with routers: auth, entries, exports; Postgres via SQLModel; S3 (boto3) signed URLs; Celery+Redis workers; Docker Compose (api, worker, redis, db, minio). Include Apple/Google token verification endpoints.

(I) Transcription worker

Implement Celery tasks: download audio, run faster-whisper, save transcript_raw, call LLM for cleanup with the given prompt, save transcript_clean, update entry status. Add retries and idempotency.

(J) Export

Implement /v1/exports to gather entries by date range, create a .zip with audio + cleaned .txt files named by timestamp, upload to storage, and email a signed link via SendGrid. Handle large ranges with pagination/chunking.

(K) First-run hint & haptics

Add a one-time coach mark near the record button: “Tip: Long-press ~3s to stop.” Provide haptics for start, pause/resume, and stop events. Include VoiceOver labels.

9) Performance, privacy & compliance (My Day)

Battery: Suspend engine when backgrounded; background uploads only on Wi-Fi (optional setting).

Reliability: Write to temp, commit atomically on stop; guard against clipping/overruns.

Localization: Capture locale; pick ASR language accordingly.

Privacy strings: NSMicrophoneUsageDescription (“My Day records audio to create your diary.”).

Data rights: In Profile: Delete Account/Data; clear privacy policy; don’t train models on user data without explicit consent.

10) Nice-to-have roadmap

Daily reminders.

Tags/moods (auto-suggest, user-editable).

Optional on-device Apple Speech for short notes.

iCloud Drive export.
